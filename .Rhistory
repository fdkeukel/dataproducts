?apply
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$newHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
runApp
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl); mtcars$vs <- factor(mtcars$vs);
mtcars$gear <- factor(mtcars$gear); mtcars$carb <- factor(mtcars$carb);
mtcars$am <- factor(mtcars$am,labels=c('auto','manual'))
fit <-lm(mpg ~ cyl6 + cyl8 + hp + wt + ammanual ,data=mtcars)
fit <-lm(mpg ~ cyl + hp + wt + ammanual ,data=mtcars)
fit <-lm(mpg ~ cyl + hp + wt + am ,data=mtcars)
runApp()
library(shiny)
library(shiny)
runApp()
runApp()
runApp()
min(mtcars$hp)
max(mtcars$hp)
avg(mtcars$hp)
average(mtcars$hp)
mean(mtcars$hp)
summary(mtcars$wt)
runApp()
runApp()
runApp()
runApp()
runApp()
data.frame("test")
mmtcars
mtcars
data.frame(4,150,2,"manual")
data.frame(4,150,2,"manual")
predict(fit, data.frame(4,150,2,"manual") )
cyl<-4
hp<-110
wt<-2
am<-"manual"
predict(fit, data.frame(cly,hp,wt,am) )
data.frame(cly,hp,wt,am)
data.frame(cyl,hp,wt,am)
predict(fit, data.frame(cyl,hp,wt,am) )
predict(fit, data.frame(factor(cyl),hp,wt,am) )
factor(cyl)
cyl<-factor(4)
predict(fit, data.frame(cyl,hp,wt,am) )
runapp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='fdkeukel',
token='925B422CC96CB63AC052A0B8E6570788',
secret='<SECRET>')
shinyapps::setAccountInfo(name='fdkeukel',
token='925B422CC96CB63AC052A0B8E6570788',
secret='5Pg+dDdvDsrs6JmKzOQaspEpqu4CgZpXrUmEAAsh')
shiny::runApp()
shiny::runApp()
shiny::runApp()
install_github('slidify')
library(devtools)
install_github('slidify')
install_git('slidify')
install_github('slidify', 'ramnatv')
install_github('ramnatv/slidify')
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
install_github('ramnathv/rCharts')
setwd("C:/Users/fdekeukelaere/Dropbox/University/Coursera/Data Science/9. Developing Data Products/CourseProject/slidify")
author("CourseProject")
library(slidify)
author("CourseProject")
setwd("C:/Users/fdekeukelaere/Dropbox/University/Coursera/Data Science/9. Developing Data Products/CourseProject")
author("slidify")
## Read-And-Delete
1. Edit YAML front matter
1. Edit YAML front matter
setwd("C:/Users/fdekeukelaere/Dropbox/University/Coursera/Data Science/9. Developing Data Products/CourseProject/slidify")
library(shiny)
runApp()
